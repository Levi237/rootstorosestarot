[{"/Users/Levi/Desktop/website/rootstorosestarot/src/index.js":"1","/Users/Levi/Desktop/website/rootstorosestarot/src/App.js":"2","/Users/Levi/Desktop/website/rootstorosestarot/src/reportWebVitals.js":"3","/Users/Levi/Desktop/website/rootstorosestarot/src/constants/routes.js":"4","/Users/Levi/Desktop/website/rootstorosestarot/src/components/deck/Deck.js":"5"},{"size":1311,"mtime":1609792380721,"results":"6","hashOfConfig":"7"},{"size":728,"mtime":1609993387545,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609618278746,"results":"9","hashOfConfig":"7"},{"size":23,"mtime":1609741922312,"results":"10","hashOfConfig":"7"},{"size":2938,"mtime":1609993387546,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1gdhz92",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/Levi/Desktop/website/rootstorosestarot/src/index.js",[],["24","25"],"/Users/Levi/Desktop/website/rootstorosestarot/src/App.js",[],"/Users/Levi/Desktop/website/rootstorosestarot/src/reportWebVitals.js",[],"/Users/Levi/Desktop/website/rootstorosestarot/src/constants/routes.js",[],"/Users/Levi/Desktop/website/rootstorosestarot/src/components/deck/Deck.js",["26","27","28"],"import React, { Component } from 'react';\n\nexport default class Deck extends Component {\n    state = {\n        deck: [\n            {\n                title: \"card one\",\n                image: \"ðŸ˜¬\",\n                info: \"one blah blah blah blah blah blah blah blah\"\n            },{\n                title: \"card two\",\n                image: \"ðŸ˜Š\",\n                info: \"two blah blah blah blah blah blah blah blah\"\n            },{\n                title: \"card three\",\n                image: \"ðŸ˜Ž\",\n                info: \"three blah blah blah blah blah blah blah blah\"\n            },{\n                title: \"card four\",\n                image: \"ðŸ¤—\",\n                info: \"four blah blah blah blah blah blah blah blah\"\n            }\n            ]\n    };\n    render(){\n        const { deck } = this.state;\n        let newDeck = [...deck];\n        let shuffledDeck = [];\n\n        const shuffleCards = () => {\n            while (newDeck.length > 0) {\n                let index = Math.floor(Math.random() * newDeck.length);\n                let card = newDeck[index];\n                shuffledDeck.push(card);\n                newDeck.splice(index, 1);\n            };\n            dealCards();\n            console.log(shuffledDeck, \"shuffled cards\")\n        };\n        const shuffleAgain = () => {\n            newDeck = [...shuffledDeck];\n            clearDeck();\n            shuffleCards();\n            dealCards();\n            console.log(shuffledDeck, \"shuffled again\")\n        };\n        \n        const dealCards = () => {\n            const container = document.getElementById('deckDisplay');\n            console.log(container, \"container\")\n            container.innerHTML = `<div><h2>${shuffledDeck[0].title}</h2></div>`;\n            console.log(shuffledDeck, \"deal deck\", deck, \"<--- deck\")\n        }\n        // const shuffleDealCards = () => {\n        //     shuffleCards();\n        //     dealCards();\n        //     // console.log(shuffledDeck, \"shuffledDeck\");\n        // };\n        const clearDeck = () => {\n            const container = document.getElementById('deckDisplay');\n            while (shuffledDeck.length > 0) {\n                shuffledDeck = [];\n                container.innerHTML = `<div><h2>empty</h2></div>`;\n            }\n            console.log(shuffledDeck, \"clearDeck\");\n        };\n        return (\n            <>\n                <h1>DECK DISPLAY</h1>\n                <div id=\"deckDisplay\">\n                    <div><h2>landing</h2></div>\n                </div>\n                <button onClick={shuffleCards}>\n                    Shuffle Deck\n                </button>\n                <button onClick={dealCards}>\n                    Deal Deck\n                </button>\n                <button onClick={shuffleAgain}>\n                    shuffleAgain\n                </button>\n                <button onClick={clearDeck}>\n                    Clear\n                </button>\n            </>\n        );\n    };\n};",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":360,"column":22,"nodeType":"35","messageId":"36","endLine":360,"endColumn":24},{"ruleId":"33","severity":1,"message":"37","line":361,"column":27,"nodeType":"35","messageId":"36","endLine":361,"endColumn":29},{"ruleId":"38","severity":1,"message":"39","line":372,"column":21,"nodeType":"40","endLine":372,"endColumn":53},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]